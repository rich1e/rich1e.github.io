import{r as o,c as p,a as n,b as a,F as c,e as s,d as t,o as r}from"./app.90fa381f.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const i={},u=s("Note: This is my personal notes/tips for migrating to Vue 3 and will be updated overtime. Please refer to "),d={href:"https://v3.vuejs.org",target:"_blank",rel:"noopener noreferrer"},m=s("the official docs"),k=s(" for the complete changelog."),h=t(`<p>Sorted by the importance of my personal sense.</p><h3 id="\u{1F4AB}-use-markraw-for-vendor-objects" tabindex="-1"><a class="header-anchor" href="#\u{1F4AB}-use-markraw-for-vendor-objects" aria-hidden="true">#</a> \u{1F4AB} use <code>markRaw</code> for vendor objects</h3><p>The new reactivity system proxied the object passed to the Vue context. For vendor objects or class instances, you need to wrap it with <code>markRaw</code> in order to disable the reactivity injection.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// works in Vue 2</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>codemirror <span class="token operator">=</span> CodeMirror<span class="token punctuation">.</span><span class="token function">fromTextArea</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// in Vue 3 you need to use markRaw()</span>
<span class="token comment">// otherwise the CodeMirror won&#39;t work as expected</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>codemirror <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>CodeMirror<span class="token punctuation">.</span><span class="token function">fromTextArea</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>I think this is a pretty tricky one. You won&#39;t see any warn or error on initialization, but the internal state of the vendor object might be messed up. You might face errors that comes from the libraries while couldn&#39;t find out why (the example above took me one hour of debugging to find out).</p><h3 id="\u{1F4AB}-sync-\u2192-v-model" tabindex="-1"><a class="header-anchor" href="#\u{1F4AB}-sync-\u2192-v-model" aria-hidden="true">#</a> \u{1F4AB} <code>.sync</code> \u2192 <code>v-model:</code></h3><p><code>.sync</code> modifier is unified by <code>v-model:</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- Vue 2 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">name.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- Vue 3 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name"><span class="token namespace">v-model:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>v-model</code> on native element would be <code>value/input</code> while on custom components, it changed to <code>modelValue</code> and <code>update:modelValue</code></p><h3 id="\u{1F4AB}-shims-vue-d-ts" tabindex="-1"><a class="header-anchor" href="#\u{1F4AB}-shims-vue-d-ts" aria-hidden="true">#</a> \u{1F4AB} <code>shims-vue.d.ts</code></h3>`,10),b=s("Update: now you can use "),v={href:"https://github.com/znck/vue-developer-experience/tree/master/packages/typescript-plugin-vue",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"@vuedx/typescript-plugin-vue",-1),g=s(" for better type inference with SFC (no need for "),_=n("code",null,"shims-vue.d.ts",-1),y=s(" then)"),w=t(`<p>Changed to this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.vue&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Component<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> defineComponent<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> Component<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,2);function x(V,q){const e=o("OutboundLink");return r(),p(c,null,[n("blockquote",null,[n("p",null,[u,n("a",d,[m,a(e)]),k])]),h,n("blockquote",null,[n("p",null,[b,n("a",v,[f,a(e)]),g,_,y])]),w],64)}var N=l(i,[["render",x]]);export{N as default};
